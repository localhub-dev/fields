import Util from '../../utils.js';
import Field from '../field.js';

export default class RichText extends Field {
  /**
   * Rich Text fields provide content creators with a WYSIWYG text editor experience. When
   * a rich text field's value is printed it is printed as HTML. When you do not want
   * content creators to have formatting capabilities use text fields. Rich text fields
   * are supported in modules.
   * @see {@link https://developers.hubspot.com/en/docs/cms/building-blocks/module-theme-fields#rich-text}
   * @param {object} data The JSON data used to generate the field.
   * @param {string|null} [data.default=null] String of content to be displayed supports
   * HTML. Note: You cannot use the `get_asset_url` function within this default property.
   * @param {Array<string>} [data.enabled_features] An array of items that
   * allows you to configure the Rich Text Editor Toolbar and what options are available
   * for content editors. Array options are "colors", "fonts", "indents", "lists",
   * "standard_emphasis", "advanced_emphasis", "glyphs", "block", "font_family",
   * "font_size", "bold", "italic", "underline", "text_color", "background_color",
   * "alignment", "bulleted_list", "numbered_list", "lineheight", "outdent", "indent",
   * "strikethrough", "superscript", "subscript", "code_format", "link", "image", "emoji",
   * "personalize", "cta", "embed", "video", "table", "charmap", "anchor", "hr",
   * "nobreaking_space", "icon", "source_code", "visual_blocks".
   * {@link https://developers.hubspot.com/docs/cms/building-blocks/module-theme-fields/rich-text-editor}
   * -------------------------------------------------------------------------------------
   * @param {string} [data.help_text] Text that will appear in the editor via tooltip to
   * assist the content creator. Best used for information that is supplementary but not
   * required to use the field.
   * @param {string} [data.id] Unique id for a field. This is generated by HubSpot. When
   * building locally you do not need to specify this id.
   * @param {string} [data.inline_help_text] Help text that will be shown inline below the
   * label of the field (limit 300 chars). Best used for information required to use the field.
   * @param {string} [data.label='Richtext field'] The text the content creator sees describing the
   * field. May contain spaces.
   * @param {boolean} [data.locked=false] Determines if the field is editable in the content
   * editor. If true, the field will not appear in the content editor.
   * @param {string} [data.name='richtext_field'] The variable name you will use to refer to this
   * field's values, and is what the value of the field is stored against. Cannot contain
   * spaces or special characters. If no name is provided, it will default to a lower 
   * snake case value of the label.
   * @param {boolean} [data.required=false] Determines if the field can be left blank in the
   * editor. If true, content will not be allowed to publish without filling out this field.
   * @param {Array} [data.visibility] Determines the display conditions for a field.
   * @param {'half_width'|null} [data.display_width=null] Allows for side by side module
   * fields in content editors, rather than full-width fields, when set to "half_width". The
   * field will appear side-by-side with the next field in the fields.json file, as long as
   * that field is also set to "half_width".
   */
  constructor (data = {}) {
    super(data);
    this.label = data.label || 'Richtext field';

    /**
     * @readonly
     * @private
     */
    this.type = 'richtext';

    /**
     * Manually defined names get priority. If no name is set, try to set it to the lower
     * snake case of the label provided. If no label is set, fall back to hardcoded value.
     */
    this.name = data.name || Util.toSnakeCase(this.label) || 'richtext_field';
  }
}
