import Util from '../../utils.js';
import Field from '../field.js';

// @todo visibility property
export default class Font extends Field {
  /**
   * Font fields provide content creators basic font styling controls. Content creators
   * can choose the size, color, font family, and the format (bold, italic, and underlined).
   * The listed fonts are all  Google fonts and standard web-safe fonts. Font fields are
   * supported in both themes and modules. Font fields can be used as style fields.
   * Note: The font family is determined by the font and font_set combined. You must have
   * both to load the font. When inheriting fields this means you need to inherit both values.
   * @see {@link https://developers.hubspot.com/en/docs/cms/building-blocks/module-theme-fields#font}
   * @see {@link https://fonts.google.com}
   * @param {object} data The JSON data used to generate the field.
   * @param {object} [data.default={}]
   * Font object with settings for size, sizing unit, color, and styles for bold, italic,
   * and underline.
   * @param {boolean} [data.load_external_fonts=true] HubSpot automatically loads the
   * selected web font to the page if the font is selected and referenced by HubL in a
   * stylesheet or in a module. Set this to false, if you are already loading the font to
   * the page, that way the font won't load twice.
   * @param {string} [data.variant] If using a Google font, the variant of the font you
   * want to use. For example, to use the 700-weight version of a font, set this to "700".
   * To use the 400-weight italic version of a font, set this to "400i".
   * -------------------------------------------------------------------------------------
   * @param {string} [data.help_text] Text that will appear in the editor via tooltip to
   * assist the content creator. Best used for information that is supplementary but not
   * required to use the field.
   * @param {string} [data.id] Unique id for a field. This is generated by HubSpot. When
   * building locally you do not need to specify this id.
   * @param {string} [data.inline_help_text] Help text that will be shown inline below the
   * label of the field (limit 300 chars). Best used for information required to use the field.
   * @param {string} [data.label='Font field'] The text the content creator sees describing the
   * field. May contain spaces.
   * @param {boolean} [data.locked=false] Determines if the field is editable in the content
   * editor. If true, the field will not appear in the content editor.
   * @param {string} [data.name='font_field'] The variable name you will use to refer to this
   * field's values, and is what the value of the field is stored against. Cannot contain
   * spaces or special characters. If no name is provided, it will default to a lower 
   * snake case value of the label.
   * @param {boolean} [data.required=false] Determines if the field can be left blank in the
   * editor. If true, content will not be allowed to publish without filling out this field.
   * @param {Array} [data.visibility] Determines the display conditions for a field.
   * @param {'half_width'|null} [data.display_width=null] Allows for side by side module
   * fields in content editors, rather than full-width fields, when set to "half_width". The
   * field will appear side-by-side with the next field in the fields.json file, as long as
   * that field is also set to "half_width".
   */
  constructor (data = {}) {
    super(data);
    this.label = data.label || 'Font field';
    this.load_external_fonts = data.load_external_fonts ?? true;

    /**
     * @example
     * default: {
     *   size: 12,
     *   font: 'Merriweather',
     *   font_set: 'google',
     *   size_unit: 'px',
     *   color: '#000',
     *   styles: {}
     * }
     */
    this.default = data.default || {};
    
    /**
     * @readonly
     * @private
     */
    this.type = 'font';

    /**
     * Manually defined names get priority. If no name is set, try to set it to the lower
     * snake case of the label provided. If no label is set, fall back to hardcoded value.
     */
    this.name = data.name || Util.toSnakeCase(this.label) || 'font_field';
  }
}
