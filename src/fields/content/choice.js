import Util from '../../utils.js';
import Field from '../field.js';

export default class Choice extends Field {
  /**
   * Choice fields are kind of synonymous with <select> elements and radio buttons. They
   * provide a way for a content creator to pick 1 item out of a list of options. They can
   * take two forms visually in the page editor. You can set them to appear like a select
   * field or radio buttons. The options for a choice field can have separate labels for
   * their values. After a module's been used in a page the option labels can still be
   * modified without negatively impacting sites since the value is still the same. Change
   * the value however and any modules that previously had that value become disassociated.
   * Choice fields are supported in both themes and modules. Choice fields can be used as
   * style fields.
   * @see {@link https://developers.hubspot.com/en/docs/cms/building-blocks/module-theme-fields#choice}
   * @param {object} data The JSON data used to generate the field.
   * @param {Array<Array<string>>} [data.choices=[['value 1', 'Label 1'], ['value 2', 'Label 2']]]
   * Array of value and label pairs. Values are listed first.
   * @param {string} [data.default] Sets the default selected value from the choice array.
   * @param {('radio'|'select')} [data.display='select'] Sets which way the field displays
   * to users. The two options are "radio" and "select".
   * -------------------------------------------------------------------------------------
   * @param {string} [data.help_text] Text that will appear in the editor via tooltip to
   * assist the content creator. Best used for information that is supplementary but not
   * required to use the field.
   * @param {string} [data.id] Unique id for a field. This is generated by HubSpot. When
   * building locally you do not need to specify this id.
   * @param {string} [data.inline_help_text] Help text that will be shown inline below the
   * label of the field (limit 300 chars). Best used for information required to use the field.
   * @param {string} [data.label='Choice field'] The text the content creator sees describing the
   * field. May contain spaces.
   * @param {boolean} [data.locked=false] Determines if the field is editable in the content
   * editor. If true, the field will not appear in the content editor.
   * @param {string} [data.name='choice_field'] The variable name you will use to refer to this
   * field's values, and is what the value of the field is stored against. Cannot contain
   * spaces or special characters. If no name is provided, it will default to a lower 
   * snake case value of the label.
   * @param {boolean} [data.required=false] Determines if the field can be left blank in the
   * editor. If true, content will not be allowed to publish without filling out this field.
   * @param {Array} [data.visibility] Determines the display conditions for a field.
   * @param {'half_width'|null} [data.display_width=null] Allows for side by side module
   * fields in content editors, rather than full-width fields, when set to "half_width". The
   * field will appear side-by-side with the next field in the fields.json file, as long as
   * that field is also set to "half_width".
   */
  constructor (data = {}) {
    super(data);
    this.label = data.label || 'Choice field';
    this.choices = data.choices || [ [ 'value 1', 'Label 1' ], [ 'value 2', 'Label 2' ] ];

    /**
     * @readonly
     * @private
     */
    this.type = 'choice';

    /**
     * Manually defined names get priority. If no name is set, try to set it to the lower
     * snake case of the label provided. If no label is set, fall back to hardcoded value.
     */
    this.name = data.name || Util.toSnakeCase(this.label) || 'choice_field';
  }
}
